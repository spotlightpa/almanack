// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0

package db

import (
	"time"

	"github.com/jackc/pgtype"
)

type AddressRole struct {
	ID           int64     `json:"id"`
	EmailAddress string    `json:"email_address"`
	Roles        []string  `json:"roles"`
	CreatedAt    time.Time `json:"created_at"`
	UpdatedAt    time.Time `json:"updated_at"`
}

type Arc struct {
	ID          int64              `json:"id"`
	ArcID       string             `json:"arc_id"`
	RawData     pgtype.JSONB       `json:"raw_data"`
	LastUpdated pgtype.Timestamptz `json:"last_updated"`
	CreatedAt   time.Time          `json:"created_at"`
	UpdatedAt   time.Time          `json:"updated_at"`
}

type DomainRole struct {
	ID        int64     `json:"id"`
	Domain    string    `json:"domain"`
	Roles     []string  `json:"roles"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

type File struct {
	ID          int64     `json:"id"`
	URL         string    `json:"url"`
	Filename    string    `json:"filename"`
	MimeType    string    `json:"mime_type"`
	Description string    `json:"description"`
	IsUploaded  bool      `json:"is_uploaded"`
	CreatedAt   time.Time `json:"created_at"`
	UpdatedAt   time.Time `json:"updated_at"`
}

type Image struct {
	ID          int64     `json:"id"`
	Path        string    `json:"path"`
	Type        string    `json:"type"`
	Description string    `json:"description"`
	Credit      string    `json:"credit"`
	SourceURL   string    `json:"src_url"`
	IsUploaded  bool      `json:"is_uploaded"`
	CreatedAt   time.Time `json:"created_at"`
	UpdatedAt   time.Time `json:"updated_at"`
}

type ImageType struct {
	Name       string   `json:"name"`
	Mime       string   `json:"mime"`
	Extensions []string `json:"extensions"`
}

type Newsletter struct {
	Subject         string      `json:"subject"`
	ArchiveURL      string      `json:"archive_url"`
	PublishedAt     time.Time   `json:"published_at"`
	Type            string      `json:"type"`
	CreatedAt       time.Time   `json:"created_at"`
	UpdatedAt       time.Time   `json:"updated_at"`
	ID              int64       `json:"id"`
	Description     string      `json:"description"`
	Blurb           string      `json:"blurb"`
	SpotlightPAPath pgtype.Text `json:"spotlightpa_path"`
}

type NewsletterType struct {
	Shortname   string `json:"shortname"`
	Name        string `json:"name"`
	Description string `json:"description"`
}

type Option struct {
	ID    int64  `json:"id"`
	Key   string `json:"key"`
	Value string `json:"value"`
}

type Page struct {
	ID            int64              `json:"id"`
	FilePath      string             `json:"file_path"`
	Frontmatter   Map                `json:"frontmatter"`
	Body          string             `json:"body"`
	ScheduleFor   pgtype.Timestamptz `json:"schedule_for"`
	LastPublished pgtype.Timestamptz `json:"last_published"`
	CreatedAt     time.Time          `json:"created_at"`
	UpdatedAt     time.Time          `json:"updated_at"`
	URLPath       pgtype.Text        `json:"url_path"`
	SourceType    string             `json:"source_type"`
	SourceID      string             `json:"source_id"`
	PublishedAt   pgtype.Timestamptz `json:"published_at"`
}

type SharedArticle struct {
	ID           int64              `json:"id"`
	Status       string             `json:"status"`
	EmbargoUntil pgtype.Timestamptz `json:"embargo_until"`
	Note         string             `json:"note"`
	SourceType   string             `json:"source_type"`
	SourceID     string             `json:"source_id"`
	RawData      pgtype.JSONB       `json:"raw_data"`
	PageID       pgtype.Int8        `json:"page_id"`
	CreatedAt    time.Time          `json:"created_at"`
	UpdatedAt    time.Time          `json:"updated_at"`
}

type SharedStatus struct {
	ID          string `json:"id"`
	Description string `json:"description"`
}

type SiteDatum struct {
	ID          int64              `json:"id"`
	Key         string             `json:"key"`
	Data        Map                `json:"data"`
	CreatedAt   time.Time          `json:"created_at"`
	UpdatedAt   time.Time          `json:"updated_at"`
	ScheduleFor time.Time          `json:"schedule_for"`
	PublishedAt pgtype.Timestamptz `json:"published_at"`
}
