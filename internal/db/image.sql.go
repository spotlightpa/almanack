// Code generated by sqlc. DO NOT EDIT.
// source: image.sql

package db

import (
	"context"
)

const getImage = `-- name: GetImage :one
SELECT
    id, path, type, description, credit, src_url, created_at, updated_at
FROM
    image
WHERE
    path = $1
`

func (q *Queries) GetImage(ctx context.Context, path string) (Image, error) {
	row := q.db.QueryRowContext(ctx, getImage, path)
	var i Image
	err := row.Scan(
		&i.ID,
		&i.Path,
		&i.Type,
		&i.Description,
		&i.Credit,
		&i.SrcUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listImages = `-- name: ListImages :many
SELECT
    id, path, type, description, credit, src_url, created_at, updated_at
FROM
    image
ORDER BY
    created_at DESC
LIMIT $1 OFFSET $2
`

type ListImagesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListImages(ctx context.Context, arg ListImagesParams) ([]Image, error) {
	rows, err := q.db.QueryContext(ctx, listImages, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Image
	for rows.Next() {
		var i Image
		if err := rows.Scan(
			&i.ID,
			&i.Path,
			&i.Type,
			&i.Description,
			&i.Credit,
			&i.SrcUrl,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateImage = `-- name: UpdateImage :one
INSERT INTO image ("path", "credit", "description", "src_url", "type")
    VALUES ($1, $2, $3, $4, $5)
ON CONFLICT (path)
    DO UPDATE SET
        credit = excluded.credit, --
        description = excluded.description, --
        src_url = CASE WHEN src_url = '' THEN
            excluded.src_url
        ELSE
            src_url
        END
    RETURNING
        id, path, type, description, credit, src_url, created_at, updated_at
`

type UpdateImageParams struct {
	Path        string `json:"path"`
	Credit      string `json:"credit"`
	Description string `json:"description"`
	SrcUrl      string `json:"src_url"`
	Type        string `json:"type"`
}

func (q *Queries) UpdateImage(ctx context.Context, arg UpdateImageParams) (Image, error) {
	row := q.db.QueryRowContext(ctx, updateImage,
		arg.Path,
		arg.Credit,
		arg.Description,
		arg.SrcUrl,
		arg.Type,
	)
	var i Image
	err := row.Scan(
		&i.ID,
		&i.Path,
		&i.Type,
		&i.Description,
		&i.Credit,
		&i.SrcUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
