// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: arc.sql

package db

import (
	"context"

	"github.com/jackc/pgtype"
)

const listArcByLastUpdated = `-- name: ListArcByLastUpdated :many
SELECT
  id, arc_id, raw_data, last_updated, created_at, updated_at
FROM
  arc
ORDER BY
  last_updated DESC
LIMIT $1 OFFSET $2
`

type ListArcByLastUpdatedParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListArcByLastUpdated(ctx context.Context, arg ListArcByLastUpdatedParams) ([]Arc, error) {
	rows, err := q.db.Query(ctx, listArcByLastUpdated, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Arc
	for rows.Next() {
		var i Arc
		if err := rows.Scan(
			&i.ID,
			&i.ArcID,
			&i.RawData,
			&i.LastUpdated,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateArc = `-- name: UpdateArc :exec
WITH arc_temp AS (
  SELECT
    jsonb_array_elements($1::jsonb) AS temp_data)
INSERT INTO arc (arc_id, raw_data)
SELECT
  temp_data ->> '_id',
  temp_data
FROM
  arc_temp
ON CONFLICT (arc_id)
  DO UPDATE SET
    raw_data = excluded.raw_data
`

func (q *Queries) UpdateArc(ctx context.Context, arcItems pgtype.JSONB) error {
	_, err := q.db.Exec(ctx, updateArc, arcItems)
	return err
}
