// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: gdocs_image.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const listGDocsImagesWhereUnset = `-- name: ListGDocsImagesWhereUnset :many
SELECT
  id, g_docs_id, doc_object_id, src_url, image_id, created_at, updated_at
FROM
  g_docs_image
WHERE
  image_id IS NULL
`

func (q *Queries) ListGDocsImagesWhereUnset(ctx context.Context) ([]GDocsImage, error) {
	rows, err := q.db.Query(ctx, listGDocsImagesWhereUnset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GDocsImage
	for rows.Next() {
		var i GDocsImage
		if err := rows.Scan(
			&i.ID,
			&i.GDocsID,
			&i.DocObjectID,
			&i.SourceURL,
			&i.ImageID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateGDocsImage = `-- name: UpdateGDocsImage :one
UPDATE
  g_docs_image
SET
  image_id = $1
WHERE
  id = $2
RETURNING
  id, g_docs_id, doc_object_id, src_url, image_id, created_at, updated_at
`

type UpdateGDocsImageParams struct {
	ImageID pgtype.Int8 `json:"image_id"`
	ID      int64       `json:"id"`
}

func (q *Queries) UpdateGDocsImage(ctx context.Context, arg UpdateGDocsImageParams) (GDocsImage, error) {
	row := q.db.QueryRow(ctx, updateGDocsImage, arg.ImageID, arg.ID)
	var i GDocsImage
	err := row.Scan(
		&i.ID,
		&i.GDocsID,
		&i.DocObjectID,
		&i.SourceURL,
		&i.ImageID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const upsertGDocsIDObjectID = `-- name: UpsertGDocsIDObjectID :exec
WITH objects_with_url (
  object_id,
  src_url
) AS (
  SELECT
    data ->> 0,
    data ->> 1
  FROM
    jsonb_array_elements($2::jsonb) tjson (data))
  INSERT INTO g_docs_image (g_docs_id, doc_object_id, src_url)
  SELECT
    $1,
    object_id,
    src_url
  FROM
    objects_with_url
  ON CONFLICT (g_docs_id,
    doc_object_id)
    DO UPDATE SET
      src_url = excluded.src_url
`

type UpsertGDocsIDObjectIDParams struct {
	GDocsID        string `json:"g_docs_id"`
	ObjectUrlPairs []byte `json:"object_url_pairs"`
}

func (q *Queries) UpsertGDocsIDObjectID(ctx context.Context, arg UpsertGDocsIDObjectIDParams) error {
	_, err := q.db.Exec(ctx, upsertGDocsIDObjectID, arg.GDocsID, arg.ObjectUrlPairs)
	return err
}
